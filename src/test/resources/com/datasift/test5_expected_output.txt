a {9:0,0,1,1,1,2,2,2,3}
algorithm {1:0}
all {1:1}
alphabetical {1:1}
an {2:1,1}
and {2:2,3}
appears {1:1}
are {1:2}
as {1:2}
at {2:2,3}
be {1:0}
bit {1:1}
body {1:1}
choice {1:2}
citations {2:1,3}
complete {1:1}
concordance {3:0,1,2}
consist {1:3}
could {1:0}
create {1:0}
datasift {1:2}
demonstrate {1:0}
document {1:2}
e.g. {1:1}
each {1:1}
format {1:3}
frequency {1:3}
from {1:2}
generate {1:2}
go {1:2}
how {1:0}
ideally {1:2}
in {1:1}
index {1:1}
is {2:1,2}
it's {1:1}
java {1:2}
language {1:2}
least {1:3}
like {2:0,1}
line {1:1}
list {2:1,3}
number {1:1}
numbers {1:3}
occurs {1:3}
of {7:1,1,1,2,3,3,3}
or {2:1,2}
page {1:1}
present {1:1}
printed {2:2,3}
program {1:2}
programming {1:2}
read {1:2}
scala {1:2}
sentence {2:1,3}
sequence {1:3}
should {1:3}
sorted {1:3}
stdin {1:2}
stdout {1:2}
text {1:1}
that {3:2,2,3}
the {5:1,1,2,3,3}
they {1:2}
to {3:0,0,2}
tokenization {1:0}
used {1:0}
using {1:2}
we'd {1:0}
where {2:1,3}
widely-used {1:2}
will {1:2}
with {2:1,3}
word {2:1,3}
words {1:1}
write {1:2}
you {1:0}
your {1:2}
zero-indexed {1:3}